// Chargement des d√©pendances
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const { Configuration, OpenAIApi } = require("openai");
const cors = require("cors");

const app = express();
const port = 3000;

// Configuration de l'API OpenAI
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Stockage des r√©ponses incompl√®tes (cl√© = user session, valeur = derni√®re r√©ponse incompl√®te)
let incompleteResponses = {};

// Fonction pour **ne pas couper une phrase en plein milieu**
const truncateAtFullSentence = (text, maxLength) => {
  if (text.length <= maxLength) return text;
  let truncated = text.slice(0, maxLength);
  let lastPunctuation = Math.max(
    truncated.lastIndexOf("."),
    truncated.lastIndexOf("!"),
    truncated.lastIndexOf("?")
  );

  if (lastPunctuation === -1) return truncated; // Si aucune ponctuation, on coupe √† la limite max
  return truncated.slice(0, lastPunctuation + 1); // Sinon, on coupe √† la fin de la phrase
};

// Fonction de mise en forme des r√©ponses
const formatResponse = (text) => {
  return text
    .replace(/(\d+)\./g, (match, number) => `\n\n${number}Ô∏è‚É£ **`) // Num√©ros en emoji + gras
    .replace(/\*\*(.*?)\*\*/g, "**$1**") // Assurer le gras des titres
    .replace(/\n/g, "<br>"); // Convertir les sauts de ligne en HTML
};

// Endpoint principal pour le chatbot
app.post("/api/chat", async (req, res) => {
  console.log("üì• Requ√™te re√ßue sur /api/chat :", req.body);

  const sessionId = req.body.sessionId || "default"; // Utiliser une session pour suivre les utilisateurs
  const conversation = req.body.conversation || [];

  if (!Array.isArray(conversation)) {
    return res.status(400).json({ error: "‚õî Le champ 'conversation' est requis et doit √™tre un tableau." });
  }

  const lastUserMessage = conversation.filter(msg => msg.role === "user").pop()?.content || "";
  const userAgeMatch = lastUserMessage.match(/\b(\d+)\s*(ans|an)\b/);
  const userAge = userAgeMatch ? parseInt(userAgeMatch[1]) : null;

  // ‚úÖ Si l'utilisateur r√©pond "oui" et qu'une r√©ponse incompl√®te est en attente ‚Üí on reprend directement
  if (/^(oui|continue|vas-y|d√©veloppe|prolonge)/i.test(lastUserMessage) && incompleteResponses[sessionId]) {
    console.log("üîÑ Reprise de la r√©ponse incompl√®te...");
    return res.json({ reply: incompleteResponses[sessionId] });
  }

  // ‚úÖ Si un enfant est mentionn√© mais sans √¢ge, on demande son √¢ge avant de r√©pondre
  if (!userAge && /mon enfant|mon fils|ma fille/i.test(lastUserMessage)) {
    return res.json({ reply: "Quel est l'√¢ge de votre enfant pour que je puisse r√©pondre plus pr√©cis√©ment ?" });
  }

  try {
    const messages = [
      {
        role: "system",
        content: `
          Tu es NORR, un assistant parental chaleureux et compatissant.
          Tu es l√† pour aider les parents √† naviguer dans leurs d√©fis quotidiens avec bienveillance et clart√©.
          Tu t'appuies sur les travaux d'Isabelle Filiozat, Emmanuelle Piquet et Lulumineuse pour enrichir tes conseils avec des perspectives psychologiques et spirituelles.

          üéØ **Objectifs de ton discours :**
          - Reste **naturel et humain**, √©vite un ton trop acad√©mique ou m√©canique.
          - **Engage-toi √©motionnellement** : montre de l'empathie et fais sentir √† l'utilisateur qu'il est compris.
          - **Utilise un langage fluide et accessible** : √©vite les longues explications trop didactiques.
          - **Pose des questions pour inviter l'utilisateur √† interagir** plut√¥t que de donner une r√©ponse compl√®te d‚Äôun coup
      
          - **Si la r√©ponse est coup√©e, demande si l'utilisateur veut que tu continues.**
          - **Formate les r√©ponses** : emoji num√©rot√©s (1Ô∏è‚É£, 2Ô∏è‚É£...), titres en gras, sauts de ligne.
        `,
      },
      ...conversation,
    ];

    const completion = await openai.createChatCompletion({
      model: "gpt-4-turbo",
      messages: messages,
      max_tokens: 300,
    });

    let fullReply = completion.data.choices[0].message.content;
    fullReply = formatResponse(fullReply);

    // ‚úÖ V√©rifier si la r√©ponse est trop longue et couper **uniquement √† la fin d'une phrase**
    const maxLength = 280;
    if (fullReply.length > maxLength) {
      let truncatedReply = truncateAtFullSentence(fullReply, maxLength);
      incompleteResponses[sessionId] = fullReply.slice(truncatedReply.length).trim(); // Stocker la suite

      fullReply = truncatedReply + "<br><br>üîπ Souhaitez-vous que je continue ?";
    } else {
      incompleteResponses[sessionId] = ""; // R√©initialiser si r√©ponse compl√®te
    }

    console.log("‚úÖ R√©ponse g√©n√©r√©e :", fullReply);
    res.json({ reply: fullReply });

  } catch (error) {
    console.error("‚ùå Erreur OpenAI :", error.response ? error.response.data : error.message);
    res.status(500).json({ error: "Erreur serveur lors de la g√©n√©ration de la r√©ponse." });
  }
});

// üöÄ D√©marrage du serveur
app.listen(port, () => {
  console.log(`üåç Serveur NORR en cours d'ex√©cution sur http://localhost:${port}`);
});
















