// Chargement des d√©pendances
require("dotenv").config(); // Charge les variables d'environnement
const express = require("express");
const bodyParser = require("body-parser");
const { Configuration, OpenAIApi } = require("openai");
const cors = require("cors");
const { v4: uuidv4 } = require("uuid"); // Import du g√©n√©rateur d'UUID

const app = express();
const port = 3000;

// Configuration de l'API OpenAI
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Stocke les sessions utilisateur anonymes en m√©moire
const sessions = {};

// Route GET pour la racine "/"
app.get("/", (req, res) => {
  res.send("Le serveur est op√©rationnel ! üåü");
});

// Endpoint principal
app.post("/api/chat", async (req, res) => {
  try {
    // R√©cup√©ration ou cr√©ation de l'identifiant utilisateur
    const userId = req.body.userId || uuidv4(); // Si pas d'ID envoy√©, on g√©n√®re un UUID
    if (!sessions[userId]) {
      sessions[userId] = { conversation: [] }; // Initialise une nouvelle session
    }

    const session = sessions[userId];
    const userMessage = req.body.message;

    // Ajouter le message de l'utilisateur √† la session
    session.conversation.push({ role: "user", content: userMessage });

    // Pr√©paration des messages pour l'API OpenAI
    const messages = [
      {
        role: "system",
        content: `
        Tu es NORR, un assistant parental chaleureux et compatissant. 
        Ton r√¥le est d'accompagner les parents avec bienveillance et de les aider √† g√©rer leurs d√©fis familiaux.
        Sois clair, direct et engageant. Tu t'inspires de Lulumineuse, Emmanuelle piquet et isabelle filiozat. Tu peux √©galement avoir un ton humoristique quand cela le permet. 
        `,
      },
      ...session.conversation, // Int√®gre la conversation compl√®te pour le contexte
    ];

    // Appel √† l'API OpenAI
    const completion = await openai.createChatCompletion({
      model: "gpt-4-turbo",
      messages: messages,
    });

    const reply = completion.data.choices[0].message.content;

    // Ajouter la r√©ponse de NORR √† la session
    session.conversation.push({ role: "assistant", content: reply });

    // R√©ponse au client
    res.json({ reply, userId }); // Retourne √©galement l'UUID pour r√©utilisation
  } catch (error) {
    console.error("Erreur OpenAI :", error.message);
    res.status(500).json({ error: "Erreur lors de la g√©n√©ration de la r√©ponse." });
  }
});

// D√©marrage du serveur
app.listen(port, () => {
  console.log(`Serveur en cours d'ex√©cution sur http://localhost:${port}`);
});



